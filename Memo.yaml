#https://gobyexample.com
goroutines: 当前资源形成的指令集的快照，这些指令集等待被执行 # 参考：DaisyChain.go
goroutines is not thread,if you think of it as a very cheap thread,you won't be far off.

1.方法:
  - 普通方法格式：方法名（参数）返回值----func plus(a int, b int) int {}
  - 结构体或者接口的实现方法格式：(参数[不是普通类型是具体的结构体名字])方法名／返回值----func (r rect) area() float64 {}
  - 结构体或者接口的实现方法格式：参数中都可以使用指针
  - 结构体内嵌匿名成员
      type person struct {
        string  //直接写类型，匿名
        age int
      }
      func main() {
        //结构体匿名成员初始化
        p := person{string: "aa", age: 18}//省略部分字段:person{string: "taozs"}, 省略字段名:person{“taozs”, 18}，但不可以同时部分省略
        //结构体匿名成员访问
        fmt.Println(p.string) //注意不能用强制类型转换（类型断言）：p.(string)
      }


2.通道:
  # Don't communicate by sharing memory,share memory by communication.
  # http.//blog.csdn.net/kjfcpua/article/details/18265441
  Channels are the pipes that connect concurrent goroutines.同一个线程里中间一定要经过一个goroutines操作
  - 无缓冲信道进出顺序：参考channels.go(先到先出)
  - 缓冲信道会在满容量的时候加锁。如果不把容量中的取走，不管有没有取数据的代码都会报错 - deadlock!：参考channelBuffering.go(先到先出)
  - 通道进出不一定要一对一，多个进一个出也可以：参考channelDirections.go
  - 但干涸的通道不能再读，即不能一个进多个出：参考channelRange.go，channelDirections.go

  - 阻塞：不能再往chan里放东西，参考channelSynchronization.go
    - 默认的，信道的存消息和取消息都是阻塞的,也就是说, 无缓冲的信道在取消息和存消息的时候都会挂起当前的goroutine，除非另一端已经准备好。
  	- 其实，无缓冲的信道永远不会存储数据，只负责数据的流通，为什么这么讲呢？
      - 从无缓冲信道取数据，必须要有数据流进来才可以，否则当前线阻塞
      - 数据流入无缓冲信道, 如果没有其他goroutine来拿走这个数据，那么当前线阻塞
  - 死锁：参考channelSynchronization.go
  	- 死锁：fatal error：all goroutines are asleep - deadlock!
  	- 非缓冲信道上如果发生了流入无流出，或者流出无流入，也就导致了死锁。
  	- 解决办法：
  	  - 1.所有进出成对出现
  	  - 2.添加一个缓冲区，不达容量不阻塞。达容量后再放一个会报错，缓冲信道会在满容量的时候
  - 无缓冲的信道是一批数据一个一个的「流进流出」，缓冲信道则是一个一个存储，然后一起流出去
  - 不在main线程里的channel，不遵循以上死锁规则？？？？


3.接口:
	多个实现的时候，把接口转化成具体某一个实现类：errorsInterface.go


4.反射:
    #https://www.golangtc.com/t/53317f90320b5261e0000058
	reflect是用来取interface的内容的，而空interface（interface{}）主要包括Value（data域）、Type（itab）两个对象。

	Interface就存两个指针，一个是指向数据的一些类型信息；另一个数据域的指针指向的是一个全新的拷贝，不是直接把指针指向了原对象，对于它的修
	改对原来的数据是没有影响的。如果想要修改原值，就要用指针。再用p.Elem就能获得可以修改的对象了。

	如果是channel，slice，func也一样，Value存的是空值，Type存的是 func(int,int)(int,int)或者func(float,float)(float,float)。


5.TimeOut: After function returns a channel that blocks for the specified duration.After the interval,the channel delivers
  the current time,once.(返回一个在指定持续时间内阻塞的通道。这段间隔过后，通道会传送一次当前时间)


6.Select: a control structure unique to concurrency, it's like a switch,but each case is a communication:
  -All channels are evaluated
  -Selection blocks until one communication can proceed,which then does
  -If multiple can proceed,select chooses pseudo-randomly
  -A default clause,if present,executes immediately if no channel is ready.


7.原子操作:
  - atomic.add/load
  - 加锁mutex.Lock()


8.&和*:
  - 这两个操作符均有多个用途。但是当它们作为地址操作符出现时，前者的作用是取址，而后者的作用是取值。
  - 当地址操作符&被应用到一个值上时会取出指向该值的指针值，而当地址操作符*被应用到一个指针值上时会取出该指针指向的那个值。它们可以被视为相反的操作。


9.断言:
  - 直接断言使用 object.(object)，如：a.(string)，为防止直接使用报panic可以如下使用
    value, ok := a.(string)
    if !ok {}
  - 配合关键字type使用：
    var t interface{}
    switch t := t.(type) {
      case bool:
          fmt.Printf("boolean %t\n", t)             // t has type bool
      case int:
          fmt.Printf("pointer to integer %d\n", *t) // t has type *int
      default:
          fmt.Printf("unexpected type %T", t)       // %T prints whatever type t has
    }
  - 类型转换的时候，string不需要使用断言









